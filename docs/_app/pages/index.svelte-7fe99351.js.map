{"version":3,"file":"index.svelte-7fe99351.js","sources":["../../../../../src/lib/stores.js","../../../../../src/lib/Connector.svelte","../../../../../src/lib/utils.ts","../../../../../src/lib/Clipboard.svelte","../../../../../src/lib/ListKeys.svelte","../../../../../src/lib/GetKeys.svelte","../../../../../src/lib/AutoSizer.svelte","../../../../../src/lib/Opened.svelte","../../../../../src/routes/index.svelte"],"sourcesContent":["import { derived, writable } from 'svelte/store';\r\n\r\nexport const keypairs = writable(new Map());\r\n\r\nexport const storedValue = writable();\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { CONSTANTS } from '@peerpiper/iframe-wallet-engine';\r\n\timport { storedValue } from '$lib/stores';\r\n\r\n\texport let mounted;\r\n\r\n\t// function names assigned only after component loads in DOM\r\n\tlet openTwinWindow;\r\n\tlet handleMessage;\r\n\r\n\t// state variables\r\n\tlet connecting;\r\n\tlet openedWindow;\r\n\r\n\tlet topUrl;\r\n\r\n\tonMount(async () => {\r\n\t\ttopUrl = self === top ? document.URL : document.referrer;\r\n\r\n\t\t// If 1) is NOT top AND 2) No keys are stored a new twin window must be opened so that the user can generate keys, in the top window\r\n\t\topenTwinWindow = () => {\r\n\t\t\tconnecting = true;\r\n\t\t\topenedWindow = window.open(window.location.href, '_blank'); // open the same domain to provide maximum security.\r\n\t\t};\r\n\r\n\t\thandleMessage = async (event) => {\r\n\t\t\tif (event.data == CONSTANTS.OPENED_SIGNAL) {\r\n\t\t\t\tevent.ports[0].postMessage(topUrl);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (event.data.key == CONSTANTS.WINDOW_SYNC) {\r\n\t\t\t\tconsole.log('Sync received: ', event.data.storedValue);\r\n\t\t\t\t$storedValue = event.data.storedValue;\r\n\r\n\t\t\t\t// save mnemonic to localstorage\r\n\t\t\t\t// run: mnemonic to proxcryptor\r\n\t\t\t\t// send confirmation back to opened window (so it can close)\r\n\r\n\t\t\t\t// await importKeys(JSON.parse(event.data.data)); // import the keys here in this browser context\r\n\t\t\t\tevent.ports[0].postMessage('Imported'); // send ack back to Opened window so it can remove \"pending\" label for this window\r\n\t\t\t\tconnecting = false;\r\n\t\t\t\topenedWindow.close();\r\n\t\t\t\twindow.focus(); // fails tho\r\n\t\t\t}\r\n\r\n\t\t\t// Main page closed, state is no longer trying to connect\r\n\t\t\tif (event.data == CONSTANTS.CLOSING) {\r\n\t\t\t\tconnecting = false;\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n</script>\r\n\r\n<svelte:window on:message={handleMessage} />\r\n\r\n<div class=\"connector\">\r\n\t{#if mounted}\r\n\t\t{#if $storedValue}\r\n\t\t\t<slot />\r\n\t\t{:else}\r\n\t\t\t<div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tdisabled={connecting}\r\n\t\t\t\t\tclass={connecting ? 'yellow' : 'ready'}\r\n\t\t\t\t\ton:click|preventDefault={openTwinWindow}\r\n\t\t\t\t\t>{connecting ? 'Authorize from Main Wallet Window' : 'Connect'}</button\r\n\t\t\t\t>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.connector {\r\n\t\tdisplay: flex;\r\n\t\tmin-height: 100%;\r\n\t\t/* margin: 1em; */\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tflex-direction: column;\r\n\t\tflex-wrap: nowrap;\r\n\t}\r\n</style>\r\n","export const shorten = (key: string, start = 6, end = 6) => {\r\n\tif (key.length < start + end + 3) return key;\r\n\treturn key.slice(0, start) + '...' + key.slice(key.length - end, key.length);\r\n};\r\n\r\nexport const shortenURL = (key: string) => {\r\n\tconst tail = 30;\r\n\tconst start = 'https://'.length; // key.slice(start, Math.min(start, 8)) +\r\n\tconst end = Math.max(key.length - tail, 0);\r\n\tconst maybeEllips = key.length > tail ? '..' : '';\r\n\treturn maybeEllips + key.slice(end, key.length);\r\n};\r\n","<script>\r\n\timport { fade } from 'svelte/transition';\r\n\r\n\texport let value = null;\r\n\r\n\tlet clip;\r\n\tlet copied;\r\n\tlet duration = 2000;\r\n\r\n\tasync function copy() {\r\n\t\tvar promise = navigator.clipboard.writeText(clip.innerHTML);\r\n\t\tawait promise;\r\n\t\tvalue = promise;\r\n\t\tcopied = true;\r\n\t\tsetTimeout(() => (copied = false), 1);\r\n\t}\r\n</script>\r\n\r\n<!-- Clipboard  -->\r\n<div class=\"Clipboard-Container\" on:click={copy}>\r\n\t<div class=\"Clipboard\" bind:this={clip}>\r\n\t\t<slot {copy} />\r\n\t</div>\r\n\t{#if copied}\r\n\t\t<div out:fade={{ duration }}>✔️Copied</div>\r\n\t{:else}\r\n\t\t<div in:fade={{ duration: 0, delay: duration }}>\r\n\t\t\t<svg\r\n\t\t\t\ton:click={copy}\r\n\t\t\t\tclass=\"octicon octicon-clippy\"\r\n\t\t\t\tviewBox=\"0 0 14 16\"\r\n\t\t\t\tversion=\"1.1\"\r\n\t\t\t\twidth=\"14\"\r\n\t\t\t\theight=\"16\"\r\n\t\t\t\taria-hidden=\"true\"\r\n\t\t\t>\r\n\t\t\t\t<title>Copy to clipboard</title>\r\n\t\t\t\t<path\r\n\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\td=\"M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\ttextarea {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 2em;\r\n\t\theight: 2em;\r\n\t\tpadding: 0;\r\n\t\tborder: none;\r\n\t\toutline: none;\r\n\t\tbox-shadow: none;\r\n\t\tbackground: transparent;\r\n\t}\r\n\t.Clipboard {\r\n\t\tmargin: 0 0.5em;\r\n\t}\r\n\t.Clipboard-Container {\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.Clipboard-Container,\r\n\tsvg {\r\n\t\tcursor: pointer;\r\n\t}\r\n\tsvg {\r\n\t\tcursor: pointer;\r\n\t\tbackground-color: transparent;\r\n\t\tstroke: var(--font-color);\r\n\t\tfill: transparent;\r\n\t\twidth: auto;\r\n\t\theight: 1.5em;\r\n\t}\r\n</style>\r\n","<script>\r\n\t// show the user's keys\r\n\t// parse out the JWKs into types: RSA and Ed25519 according to JWK\r\n\timport { shorten } from '$lib/utils';\r\n\timport Clipboard from './Clipboard.svelte';\r\n\r\n\texport let keys;\r\n\r\n\tlet selectedRSA;\r\n\tlet collapsed;\r\n</script>\r\n\r\n{#if keys && keys.length > 0}\r\n\t<div class=\"card\">\r\n\t\t{#if keys.filter((k) => k.publicKeyJWK.kty == 'RSA').length}\r\n\t\t\t<div class=\"keylist\">\r\n\t\t\t\t<div class=\"row left\">\r\n\t\t\t\t\t<span>Arweave</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row list-group\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{#each keys.filter((k) => k.publicKeyJWK.kty == 'RSA') as rsaJWK}\r\n\t\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\t\tclass=\"{collapsed && selectedRSA != rsaJWK.kid\r\n\t\t\t\t\t\t\t\t\t? 'hide'\r\n\t\t\t\t\t\t\t\t\t: ''} list-group-item list-group-item-action \"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Clipboard />\r\n\t\t\t\t\t\t\t\t{shorten(rsaJWK.publicKeyJWK.kid)}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t\t{#if keys.filter((k) => k.publicKeyJWK.crv == 'Ed25519')}\r\n\t\t\t<div class=\"keylist\">\r\n\t\t\t\t<div class=\"row left\">\r\n\t\t\t\t\t<span>Ed25519</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row list-group\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{#each keys.filter((k) => k.publicKeyJWK.crv == 'Ed25519') as edJWK}\r\n\t\t\t\t\t\t\t<li class=\" list-group-item list-group-item-action \">\r\n\t\t\t\t\t\t\t\t{shorten(edJWK.name)}\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\t<Clipboard>{edJWK.publicKeyJWK.x}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\t<Clipboard>{edJWK.publicKeyBase58}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\t<Clipboard>{edJWK.publicKey}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<!-- <b>{shorten(key?.publicKeyBase58)}</b><br /> -->\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\tdiv {\r\n\t\t--font-color: #0eff02;\r\n\t}\r\n\t.full-pubKey {\r\n\t\t/* display: none; */\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.card {\r\n\t\tmargin: 1em 0em;\r\n\t\tbackground-color: rgb(35, 35, 35);\r\n\t\tpadding: 1.5em;\r\n\t\t-webkit-border-radius: 4px;\r\n\t\t-moz-border-radius: 4px;\r\n\t\tborder-radius: 4px;\r\n\t\tbox-shadow: 2px 2px 6px rgba(14, 255, 2, 0.7);\r\n\t\tcolor: var(--font-color);\r\n\t}\r\n\t.keylist {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\tflex-wrap: nowrap;\r\n\t\tjustify-content: flex-start;\r\n\t\talign-items: stretch;\r\n\t\talign-content: stretch;\r\n\t\tborder-width: 2px;\r\n\t\tborder-bottom: 1px #d6e7df solid;\r\n\t\tpadding-bottom: 4px;\r\n\t\tmargin-bottom: 4px;\r\n\t}\r\n\t.left {\r\n\t\tflex-shrink: 2;\r\n\t\twidth: 85px;\r\n\t}\r\n\t.row,\r\n\tul {\r\n\t\tmargin: 0em;\r\n\t\tpadding: 0em;\r\n\t}\r\n\t.row:not(.left) {\r\n\t\tflex: 1 1 auto;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\tli {\r\n\t\tlist-style: none;\r\n\t\tfont-family: var(--font-mono);\r\n\t}\r\n</style>\r\n","<script>\r\n\t/**\r\n\tKeys can come from:\r\n\t- Loaded from storage (index.svelte, in which case this component is not needed)\r\n\t- Generated from scratch (here)\r\n\t- Load by user (here)\r\n\r\n\tkeys get saved to $storedValue which trigger the ImmortalDB saved\r\n\t*/\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\timport { keypairs } from '$lib/stores';\r\n\timport { storedValue } from '$lib/stores';\r\n\r\n\timport { internals } from '@peerpiper/iframe-wallet-engine';\r\n\timport ListKeys from './ListKeys.svelte';\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet handleGenerateKeypair;\r\n\r\n\t// state variables\r\n\tlet creating = '';\r\n\tlet keys;\r\n\r\n\tonMount(async () => {\r\n\t\thandleGenerateKeypair = async () => {\r\n\t\t\tcreating = 'Creating keypairs...';\r\n\r\n\t\t\tconst mnemonic = await internals.generateMnemonic();\r\n\r\n\t\t\t// save to storedValue.\r\n\t\t\t// TODO: offer password protection/encryption?\r\n\t\t\t$storedValue = { ...$storedValue, mnemonic };\r\n\r\n\t\t\tcreating += '<br/>Created mnemonic.';\r\n\t\t\tcreating += `<br/>${mnemonic}`;\r\n\t\t\tcreating += '<br/>Creating master keypair (type ed25519)...';\r\n\t\t};\r\n\t});\r\n\r\n\t$: if ($storedValue && $storedValue.mnemonic) loadKeys(); // load keys once there is a storedValue\r\n\r\n\tasync function loadKeys() {\r\n\t\tconsole.log('LOADING KEYS into Proxcryptor...');\r\n\t\tawait internals.loadMnemonicInProxcryptor($storedValue.mnemonic); // let proxcryptorName =\r\n\t\tconsole.log('LOADED KEYS into Proxcryptor...');\r\n\t\tdispatch('loadedKeys', 'details'); // let parent component know\r\n\t\tkeys = getLoadedKeys(); // get all proxcryptor public key info\r\n\t}\r\n\r\n\tfunction getLoadedKeys() {\r\n\t\treturn internals.getLoadedKeys();\r\n\t}\r\n</script>\r\n\r\n{#if $storedValue !== undefined && $storedValue === null}\r\n\t<!-- Show \"Create Keys\" if no keys exist, no matter what page is showing -- toolbar? -->\r\n\t<div class=\"submit attention\">\r\n\t\tNo keypairs detected in this browser. Create or Import them:\r\n\t\t<button class={'green'} on:click={handleGenerateKeypair}>Create New Keypairs</button>\r\n\t\t{@html creating}\r\n\t</div>\r\n{:else}\r\n\t<!-- GetKeys: has storedValue, sending to Connector if in Opened window. Else, allowing user to manage keys.<br /> -->\r\n\t<ListKeys {keys} />\r\n\t<slot />\r\n{/if}\r\n\r\n<style>\r\n\tdiv {\r\n\t\tpadding: 2em;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\tlet offsetHeight;\r\n\tlet offsetWidth;\r\n\r\n\tlet resolveConnector;\r\n\tlet Connection;\r\n\tlet connector;\r\n\t// = new Promise((resolve, reject) => {\r\n\t// \tresolveConnector = resolve;\r\n\t// });\r\n\r\n\tlet walletReady;\r\n\r\n\tonMount(async () => {\r\n\t\t({ Connection } = await import('@peerpiper/iframe-wallet-engine'));\r\n\t\tconst connection = new Connection();\r\n\t\tconnector = await connection.init();\r\n\r\n\t\twalletReady = async () => {\r\n\t\t\tconsole.log(`Wallet connector Ready`);\r\n\t\t\tconnector.walletReady(); // works\r\n\t\t};\r\n\t});\r\n\r\n\t$: connector && offsetHeight && setHeight(offsetHeight);\r\n\t$: connector && offsetWidth && setWidth(offsetWidth);\r\n\r\n\tfunction setHeight(height) {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.setIframeParentHeight(height); // works\r\n\t}\r\n\r\n\tfunction setWidth(width) {\r\n\t\t// console.log(`Setting width ${width}`);\r\n\t\tconnector.setIframeParentWidth(width); // works\r\n\t}\r\n</script>\r\n\r\n<div class=\"autosizer\" bind:offsetHeight bind:offsetWidth>\r\n\t{#if walletReady}\r\n\t\t<slot {walletReady} />\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.autosizer {\r\n\t\tmargin: 0em;\r\n\t\t/* min-height: 100%;\r\n        height: 100%;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tflex-direction: column;\r\n\t\tflex-wrap: nowrap; */\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { CONSTANTS, internals } from '@peerpiper/iframe-wallet-engine';\r\n\timport { storedValue } from '$lib/stores';\r\n\r\n\timport GetKeys from '$lib/GetKeys.svelte';\r\n\timport Manager from '$lib/Manager.svelte';\r\n\r\n\tlet keyDetails;\r\n\tlet mounted;\r\n\r\n\tlet syncKeys;\r\n\tlet pending = true;\r\n\r\n\tonMount(() => {\r\n\t\t// keyDetails = internals.getLoadedKeys(); // todo\r\n\t\tif (window.location.origin === window.opener?.origin) {\r\n\t\t\tsendOpenerMsg(CONSTANTS.OPENED_SIGNAL, (event) => {\r\n\t\t\t\t// called when the opener replies to our message above\r\n\t\t\t\tconsole.log('iframe confirmed loaded by opener');\r\n\t\t\t\tpending = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\tfunction sendOpenerMsg(msg, callback = (_) => {}) {\r\n\t\t\tconst channel = new MessageChannel();\r\n\t\t\tchannel.port1.onmessage = callback; // Listen for messages on port1\r\n\t\t\ttry {\r\n\t\t\t\tif (window.opener?.origin === window.location.origin)\r\n\t\t\t\t\twindow.opener.postMessage(msg, window.location.origin, [channel.port2]); // the opener will receive this message\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Origins didn't match\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Called when user allows a copy of the keys to be imported to another browser window in same origin\r\n\t\tsyncKeys = () => {\r\n\t\t\tsendOpenerMsg({ key: CONSTANTS.WINDOW_SYNC, storedValue: $storedValue }, (event) => {\r\n\t\t\t\tconsole.log('onComplete', event.data);\r\n\t\t\t\tpending = null;\r\n\t\t\t\tnavigateBack();\r\n\t\t\t}); // uses same origin, keys are secure\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('beforeunload', () => {\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(window.opener?.origin);\r\n\t\t\t\tconsole.log(window.location.origin);\r\n\t\t\t\tif (window.opener?.origin === window.location.origin)\r\n\t\t\t\t\twindow.opener.postMessage(CONSTANTS.CLOSING);\r\n\t\t\t\tnavigateBack();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Origins didn't match\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\tfunction navigateBack() {\r\n\t\tif (!window.opener) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t// window.opener.focus(); // fails\r\n\t\t\twindow.history.back(); // works\r\n\t\t\t// window.close();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n{#if mounted && !pending}\r\n\t<slot {syncKeys} />\r\n{/if}\r\n","<script>\r\n\timport { onMount, setContext } from 'svelte';\r\n\timport Connector from '$lib/Connector.svelte';\r\n\timport GetKeys from '$lib/GetKeys.svelte';\r\n\timport { storedValue } from '$lib/stores';\r\n\timport AutoSizer from '$lib/AutoSizer.svelte';\r\n\timport Opened from '$lib/Opened.svelte';\r\n\r\n\timport Manager from '$lib/Manager.svelte';\r\n\r\n\tconst STORED_VALUE = 'STORED_VALUE';\r\n\tconst def = null;\r\n\r\n\t// browser functions (set in onMount to ensure browser loaded)\r\n\tlet ImmortalDB, save, mounted;\r\n\r\n\tonMount(async () => {\r\n\t\t({ ImmortalDB } = await import('immortal-db'));\r\n\t\tconst storedString = await ImmortalDB.get(STORED_VALUE, def);\r\n\t\t$storedValue = JSON.parse(storedString);\r\n\r\n\t\tsave = () => {\r\n\t\t\tImmortalDB.set(STORED_VALUE, JSON.stringify($storedValue)); // auto save when $storedValue changes\r\n\t\t};\r\n\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\t$: if (ImmortalDB && $storedValue && save) save();\r\n\r\n\tfunction loadedKeys() {\r\n\t\tsave();\r\n\t\tconsole.log('Saved loaded Keys');\r\n\t}\r\n\r\n\t// let walletReady\r\n\t// on:loadedKeys={walletReady}\r\n</script>\r\n\r\n<!-- Based on whether this is the Window.Top (not an iframe) or a Child (iframe) depends on which to show: -->\r\n{#if window == window.top}\r\n\t<!-- NOT an iframe  -->\r\n\t<div class=\"top-wrapper\">\r\n\t\t{#if window.opener}\r\n\t\t\t<!-- Opened handles on:loadedKeys by ALSO syncing them with the opener window -->\r\n\t\t\t<Opened let:syncKeys>\r\n\t\t\t\t<Manager>\r\n\t\t\t\t\t{#if syncKeys}\r\n\t\t\t\t\t\t<GetKeys on:loadedKeys on:loadedKeys={syncKeys} />\r\n\t\t\t\t\t{/if}\r\n\t\t\t\t</Manager>\r\n\t\t\t</Opened>\r\n\t\t{:else}\r\n\t\t\t<!-- Manager handles on:loadedKeys ONLY by saving them to storage -->\r\n\t\t\t<Manager>\r\n\t\t\t\t<GetKeys on:loadedKeys />\r\n\t\t\t</Manager>\r\n\t\t{/if}\r\n\t</div>\r\n{:else}\r\n\t<!-- Auto-resize embedded iframe -->\r\n\t<AutoSizer let:walletReady>\r\n\t\t<!-- walletReady gets passed from AutoSizer to GetKeys -->\r\n\t\t<Connector {mounted}>\r\n\t\t\t<Manager>\r\n\t\t\t\t{#if walletReady}\r\n\t\t\t\t\t<GetKeys on:loadedKeys={walletReady} />\r\n\t\t\t\t{/if}\r\n\t\t\t</Manager>\r\n\t\t</Connector>\r\n\t</AutoSizer>\r\n{/if}\r\n\r\n<!-- Note: Don't style outside of the AutoSizer, or else the sizes in the ifram will be all messed up -->\r\n<style>\r\n\t.top-wrapper {\r\n\t\tmargin: 1.618em;\r\n\t\tpadding: 1.618em;\r\n\t}\r\n</style>\r\n"],"names":["CONSTANTS","internals"],"mappings":"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"}